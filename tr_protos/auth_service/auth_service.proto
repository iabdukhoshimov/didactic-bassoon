syntax = "proto3";

package auth_service;
option go_package = "gitlab.com/zimtox/auth_service";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
import "auth_service/auth_types.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: { title: "API" version: "1.0.0" }
    security_definitions: {
        security: {
            key: "bearer"
            value: { type: TYPE_API_KEY in: IN_HEADER name: "Authorization" description: "Authentication token, prefixed by Bearer: Bearer <token>" }
        }
    }
    security: { security_requirement: { key: "bearer" } }
};

service AuthService {
    rpc Register(RegisterRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/auth/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc EmailVerification(EmailVerificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/email-verification"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc SendCode(SendCodeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/send-code"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/logout"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/v1/auth/refresh"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc ParseOrganizationToken(ParseOrganizationTokenRequest) returns (ParseOrganizationTokenResponse) {
        option (google.api.http) = {
            post: "/v1/auth/parse-organization-token"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { }
        };
    }

    rpc ParseUserToken(ParseUserTokenRequest) returns (ParseUserTokenResponse) {}
}