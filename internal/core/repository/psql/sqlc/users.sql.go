// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    "first_name",
    "last_name",
    "email",
    "password",
    "role",
    "user_status",
    "created_by",
    "organization_id"
  )
VALUES ($1, $2, $3, $4, $5, 'ACTIVE', $6, $7)
RETURNING "id"
`

type CreateUserParams struct {
	FirstName      string      `json:"first_name"`
	LastName       string      `json:"last_name"`
	Email          string      `json:"email"`
	Password       string      `json:"password"`
	Role           Roles       `json:"role"`
	CreatedBy      zero.String `json:"created_by"`
	OrganizationID zero.String `json:"organization_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.CreatedBy,
		arg.OrganizationID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createUserWithRole = `-- name: CreateUserWithRole :one
INSERT INTO "users" (
    "first_name",
    "last_name",
    "email",
    "password",
    "role",
    "user_status"
) VALUES ($1, $2, $3, $4, 'OWNER', $5)
RETURNING "id"
`

type CreateUserWithRoleParams struct {
	FirstName  string      `json:"first_name"`
	LastName   string      `json:"last_name"`
	Email      string      `json:"email"`
	Password   string      `json:"password"`
	UserStatus zero.String `json:"user_status"`
}

func (q *Queries) CreateUserWithRole(ctx context.Context, arg CreateUserWithRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, createUserWithRole,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.UserStatus,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
update "users"
set "deleted_at" = now()
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, first_name, last_name, email, password, role, user_status, created_at, updated_at, deleted_at, created_by, organization_id
from "users"
where id = $1 and "deleted_at" is null
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.UserStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.OrganizationID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id,
  "first_name",
  "last_name",
  "password",
  "role",
  "user_status"
from "users"
where "email" = $1
`

type GetUserByEmailRow struct {
	ID         string      `json:"id"`
	FirstName  string      `json:"first_name"`
	LastName   string      `json:"last_name"`
	Password   string      `json:"password"`
	Role       Roles       `json:"role"`
	UserStatus zero.String `json:"user_status"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Role,
		&i.UserStatus,
	)
	return i, err
}

const getUserByProperty = `-- name: GetUserByProperty :one
select id, first_name, last_name, email, password, role, user_status, created_at, updated_at, deleted_at, created_by, organization_id
from "users"
where "email" = $1
`

func (q *Queries) GetUserByProperty(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByProperty, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.UserStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.OrganizationID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, first_name, last_name, email, password, role, user_status, created_at, updated_at, deleted_at, created_by, organization_id
from "users"
where "deleted_at" is null
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.UserStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
update "users"
set "first_name" = $2,
  "last_name" = $3,
  "updated_at" = now()
where id = $1
`

type UpdateUserParams struct {
	ID        string `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.FirstName, arg.LastName)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
update "users"
set "user_status" = $2
where id = $1
`

type UpdateUserStatusParams struct {
	ID         string      `json:"id"`
	UserStatus zero.String `json:"user_status"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.ID, arg.UserStatus)
	return err
}

const updateUserStatusByEmail = `-- name: UpdateUserStatusByEmail :exec
update "users"
set "user_status" = $2
where email = $1
`

type UpdateUserStatusByEmailParams struct {
	Email      string      `json:"email"`
	UserStatus zero.String `json:"user_status"`
}

func (q *Queries) UpdateUserStatusByEmail(ctx context.Context, arg UpdateUserStatusByEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserStatusByEmail, arg.Email, arg.UserStatus)
	return err
}
