// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: refresh_token.sql

package sqlc

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into "refresh_token" (
        "user_id",
        "refresh_token",
        "expires_at"
    )
values ($1, $2, $3)
returning id
`

type CreateRefreshTokenParams struct {
	UserID       string    `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (string, error) {
	row := q.db.QueryRow(ctx, createRefreshToken, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
delete from "refresh_token"
where refresh_token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, refreshToken)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select id, user_id, refresh_token, created_at, expires_at
from "refresh_token"
where id = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, id string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, id)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
update "refresh_token"
set "refresh_token" = $2,
    "expires_at" = $3
where id = $1
`

type UpdateRefreshTokenParams struct {
	ID           string    `json:"id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateRefreshToken, arg.ID, arg.RefreshToken, arg.ExpiresAt)
	return err
}
